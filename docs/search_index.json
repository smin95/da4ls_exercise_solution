[
["index.html", "Data Analysis for the Life Sciences with R: Exercise Solutions Welcome Acknowledgment", " Data Analysis for the Life Sciences with R: Exercise Solutions Seung Hyun (Sam) Min 2020-12-09 Welcome This book contains unofficial exercise solutions for the book Data Analysis for the Life Sciences with R by Rafael A. Irizarry and Michael I. Love. The PDF copy of the book is available for free and the physical copy is available in Amazon. Acknowledgment I would like to thank Rafael A. Irizarry and Michael I. Love for writing this wonderful book. "],
["getting-started.html", "Chapter 1 Getting started", " Chapter 1 Getting started Since this chapter does not deal with statistics, I have decided to skip this chapter altogether. "],
["inference.html", "Chapter 2 Inference 2.1 2.7 Exercises 2.2 2.9 Exercises", " Chapter 2 Inference First, upload necessary package(s). library(tidyverse) #also uploads dplyr library(rafalib) # important for plotting with base R 2.1 2.7 Exercises If you have not downloaded the data before, dir &lt;- &quot;https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/&quot; filename &lt;- &quot;femaleControlsPopulation.csv&quot; url &lt;- paste0(dir, filename) x &lt;- unlist(read.csv(url)) Or if you already have downloaded the data, then just upload it. dat &lt;- read.csv(&#39;femaleControlsPopulation.csv&#39;) bodyweight &lt;- select(dat, Bodyweight) x &lt;- unlist(bodyweight) # or use pipe %&gt;% x &lt;- read.csv(&#39;femaleControlsPopulation.csv&#39;) %&gt;% select(Bodyweight) %&gt;% unlist() Check out what unlist does by typing ?unlist in the command. The second method is more concise because of the pipe %&gt;%, which allows multiple lines of commands to be in one continuous line. 2.1.1 Question 1 What is the average of these weights? mean(x) ## [1] 23.89338 2.1.2 Question 2 After setting the seed at 1, set.seed(1) take a random sample size 5. What is the absolute value (use abs) of the difference between the average of the sample and the average of all the values? set.seed(1) avg_sample &lt;- mean(sample(x,5)) # average of the sample of 5 avg_pop &lt;- mean(x) # average of all values abs(avg_sample - avg_pop) # absolute difference ## [1] 0.2706222 2.1.3 Question 3 After setting the seed at 5, set.seed(5) take a random sample size 5. What is the absolute value (use abs) of the difference between the average of the sample and the average of all the values? set.seed(5) avg_sample &lt;- mean(sample(x,5)) # average of the sample of 5 avg_pop &lt;- mean(x) # average of all values abs(avg_sample - avg_pop) # absolute difference ## [1] 1.433378 2.1.4 Question 4 Why are the answers from 2 and 3 different? set.seed(1) # question 2 a &lt;- sample(x,5) a ## Bodyweight60 Bodyweight84 Bodyweight128 Bodyweight202 ## 21.51 28.14 24.04 23.45 ## Bodyweight45 ## 23.68 set.seed(5) # question 3 b &lt;- sample(x,5) b ## Bodyweight46 Bodyweight154 Bodyweight205 Bodyweight64 ## 21.86 20.30 22.95 21.92 ## Bodyweight24 ## 25.27 identical(a,b) # these two samples are not identical ## [1] FALSE Notice that samples a and b differ. Since the seeds were different (1 vs 5), different random numbers were generated. Therefore, the answer is C: Because the average of the samples is a random variable. 2.1.5 Question 5 Set the seed at 1, then using a for-loop take a random sample of 5 mice in 1,000 times. Save these averages. What percent of these 1,000 averages are more than 1 gram away from the average of x? set.seed(1) n &lt;- 1000 res &lt;- vector(&#39;double&#39;,n) for (i in seq(n)) { avg_sample &lt;- mean(sample(x,5)) res[[i]] &lt;- avg_sample } mean(abs(res-mean(x)) &gt; 1) ## [1] 0.498 To make a for loop work in R, an empty vector needs to be created first. This can be achieved with the function vector. In this example, the empty vector is res (short for result). In the for loop, each average (avg_sample) from one repetition gets stored in res. 2.1.6 Question 6 We are now going to increase the number of times we redo the sample from 1,000 to 10,000. Set the seed at 1, then using a for-loop take a random sample of 5 mice 10,000 times. Save these averages. What percent of these 10,000 averages are more than 1 gram away from the average of x? set.seed(1) n &lt;- 10000 res &lt;- vector(&#39;double&#39;,n) for (i in seq(n)) { avg_sample &lt;- mean(sample(x,5)) res[[i]] &lt;- avg_sample } mean(abs(res-mean(x)) &gt; 1) ## [1] 0.4976 2.1.7 Question 7 Note that the answers to 5 and 6 barely changed. This is expected. The way we think about the random value distributions is as the distribution of the list of values obtained if we repeated the experiment an infinite number of times. On a computer, we can’t perform an infinite number of iterations so instead, for our examples, we consider 1,000 to be large enough, thus 10,000 is as well. Now if instead we change the sample size, then we change the random variable and thus its distribution. Set the seed at 1, then using a for-loop take a random sample of 50 mice 1,000 times. Save these averages. What percent of these 1,000 averages are more than 1 gram away from the average of x? set.seed(1) n &lt;- 1000 res &lt;- vector(&#39;double&#39;,n) for (i in seq(n)) { avg_sample &lt;- mean(sample(x,50)) res[[i]] &lt;- avg_sample } mean(abs(res-mean(x)) &gt; 1) ## [1] 0.019 2.1.8 Question 8 Use a histogram to “look” at the distribution of averages we get with a sample size of 5 and sample size of 50. How would you say they differ? # sample size = 5 set.seed(1) n &lt;- 1000 res5 &lt;- vector(&#39;double&#39;,n) for (i in seq(n)) { avg_sample &lt;- mean(sample(x,5)) res5[[i]] &lt;- avg_sample } sd(res5) # standard deviation = spread of the histogram ## [1] 1.52445 # sample size = 50 set.seed(1) n &lt;- 1000 res50 &lt;- vector(&#39;double&#39;,n) for (i in seq(n)) { avg_sample &lt;- mean(sample(x,50)) res50[[i]] &lt;- avg_sample } sd(res50) # standard deviation = spread of the histogram ## [1] 0.4260116 mypar(1,2) # plot histograms hist(res5) hist(res50) mypar is a function from the package rafalib. It helps to align multiple plots in a single plot. mypar(1,1) contains one panel only, mypar(2,1) contains 2 rows of panels and 1 column, mypar(1,2) contains 1 row of panels and 2 columns, etc. Type ?mypar for more information. hist plots a histogram. The answer is B: They both look normal, but with a sample size of 50 the spread is smaller. 2.1.9 Question 9 For the last set of averages, the ones obtained from a sample size of 50, what percent are between 23 and 25? mean((res50 &gt;=23) &amp; (res50 &lt;= 25)) ## [1] 0.976 2.1.10 Question 10 Now ask the same question of a normal distribution with average 23.9 and standard deviation 0.43. pnorm(25,23.9,0.43) - pnorm(23,23.9,0.43) ## [1] 0.9765648 The answers to 9 and 10 were very similar. This is because we can approximate the distribution of the sample average with a normal distribution. We will learn more about the reason for this next. 2.2 2.9 Exercises If you have not downloaded the data before: dir &lt;- &quot;https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/&quot; filename &lt;- &quot;mice_pheno.csv&quot; url &lt;- paste0(dir, filename) dat &lt;- read.csv(url) dat &lt;- na.omit(dat) If you have the data already in your directory: raw_data &lt;- read.csv(&#39;mice_pheno.csv&#39;) dat &lt;- na.omit(raw_data) 2.2.1 Question 1 Use dplyr to create a vector x with the body weight of all males on the control (chow) diet. What is this population’s average? x &lt;- dat %&gt;% filter(Sex == &#39;M&#39; &amp; Diet == &#39;chow&#39;) %&gt;% select(Bodyweight) %&gt;% unlist() mean(x) ## [1] 30.96381 Throughout the book, I will be using %&gt;% for brevity. If you don’t understand it, please check out Chapter 18 of *R for Data Science. 2.2.2 Question 2 Now use the rafalib package and use the popsd function to compute the population standard deviation. popsd(x) ## [1] 4.420501 2.2.3 Question 3 Set the seed at 1. Take a random sample X of size 25 from x. What is the sample average? set.seed(1) samp_x &lt;- sample(x,25) # sample of x mean(samp_x) ## [1] 32.0956 2.2.4 Question 4 Use dplyr to create a vector y with the body weight of all males on the high fat (hf) diet. What is this population’s average? y &lt;- dat %&gt;% filter(Sex == &#39;M&#39; &amp; Diet == &#39;hf&#39;) %&gt;% select(Bodyweight) %&gt;% unlist() mean(y) ## [1] 34.84793 2.2.5 Question 5 Now use the rafalib package and use the popsd function to compute the population standard deviation. popsd(y) ## [1] 5.574609 2.2.6 Question 6 Set the seed at 1. Take a random sample Y of size 25 from y. What is the sample average? set.seed(1) samp_y &lt;- sample(y,25) mean(samp_y) ## [1] 34.768 2.2.7 Question 7 What is the difference in absolute value between \\(\\bar{y}-\\bar{x}\\) and \\(\\bar{Y}-\\bar{X}\\)? pop_diff &lt;- mean(y) - mean(x) sample_diff &lt;- mean(samp_y) - mean(samp_x) abs(sample_diff - pop_diff) ## [1] 1.211716 2.2.8 Question 8 Repeat the above for females. Make sure to set the seed to 1 before each sample call. What is the difference in absolute value between \\(\\bar{y}-\\bar{x}\\) and \\(\\bar{Y}-\\bar{X}\\)? chow_f_pop &lt;- dat %&gt;% filter(Sex == &#39;F&#39; &amp; Diet == &#39;chow&#39;) %&gt;% select(Bodyweight) %&gt;% unlist() # x hf_f_pop &lt;- dat %&gt;% filter(Sex == &#39;F&#39; &amp; Diet == &#39;hf&#39;) %&gt;% select(Bodyweight) %&gt;% unlist() # y set.seed(1) sample_chow_f_pop &lt;- sample(chow_f_pop, 25) # X sample_hf_f_pop &lt;- sample(hf_f_pop,25) # Y pop_diff &lt;- mean(hf_f_pop) - mean(chow_f_pop) # y - x sample_diff &lt;- mean(sample_hf_f_pop) - mean(sample_chow_f_pop) # Y - X abs(sample_diff - pop_diff) ## [1] 0.07888278 2.2.9 Question 9 For the females, our sample estimates were closer to the population difference than with males. What is a possible explanation for this? ans &lt;- c(popsd(hf_f_pop), popsd(chow_f_pop), popsd(y), popsd(x)) names(ans) &lt;- c(&#39;hf female&#39;, &#39;chow female&#39;, &#39;hf male&#39;, &#39;chow male&#39;) ans ## hf female chow female hf male chow male ## 5.069870 3.416438 5.574609 4.420501 The answer is A: The population variance of the females is smaller than that of the males; thus, the sample variable has less variability. "]
]
